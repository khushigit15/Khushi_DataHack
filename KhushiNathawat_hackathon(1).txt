{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4927e9cd",
   "metadata": {},
   "source": [
    "# Vaccine Prediction Project\n",
    "This notebook contains the processes of loading data, preprocessing, model training, and making predictions on the likelihood of individuals receiving flu vaccines. We used logistic regression within a MultiOutputClassifier for binary classification of each vaccine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "730a4742",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder, SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.multioutput import MultiOutputClassifier\n",
    "\n",
    "# Load training data\n",
    "training_features = pd.read_csv('training_set_features.csv')\n",
    "training_labels = pd.read_csv('training_set_labels.csv')\n",
    "test_data = pd.read_csv('test_set_features.csv')\n",
    "\n",
    "# Merge features and labels for training\n",
    "train_data = pd.merge(training_features, training_labels, on='respondent_id')\n",
    "features = train_data.columns.difference(['respondent_id', 'xyz_vaccine', 'seasonal_vaccine'])\n",
    "X_train = train_data[features]\n",
    "y_train = train_data[['xyz_vaccine', 'seasonal_vaccine']]\n",
    "X_test = test_data[features]\n",
    "\n",
    "# Preprocessing pipeline\n",
    "numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns\n",
    "categorical_features = X_train.select_dtypes(include=['object']).columns\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', Pipeline(steps=[\n",
    "            ('imputer', SimpleImputer(strategy='median')),\n",
    "            ('scaler', StandardScaler())]), numeric_features),\n",
    "        ('cat', OneHotEncoder(), categorical_features)\n",
    "    ])\n",
    "\n",
    "# Define and train the model\n",
    "model = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('classifier', MultiOutputClassifier(LogisticRegression(solver='liblinear')))\n",
    "])\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the test set\n",
    "probabilities = model.predict_proba(X_test)\n",
    "xyz_vaccine_prob = probabilities[0][:, 1]\n",
    "seasonal_vaccine_prob = probabilities[1][:, 1]\n",
    "\n",
    "# Create submission file\n",
    "submission = pd.DataFrame({\n",
    "    'respondent_id': test_data['respondent_id'],\n",
    "    'xyz_vaccine': xyz_vaccine_prob,\n",
    "    'seasonal_vaccine': seasonal_vaccine_prob\n",
    "})\n",
    "submission.to_csv('vaccine_prediction_probabilities.csv', index=False)\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
